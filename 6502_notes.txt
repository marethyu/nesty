6502 Notes
==========

Cycle breakdowns for some instructions
```
$B5: LDA Zero Page,X
2 bytes

cycle breakdown:
1. fetch the opcode from PC ($B5) and increment PC
2. fetch a byte from PC (nn) and increment PC
3. read from nn, separately add x to nn (NOTE: reading from nn is a throwaway read used for adding x; the read value is not used)
4. read a byte to A from (nn+x)%256

total cycles: 4

$AD: LDA Absolute
3 bytes

cycle breakdown:
1. fetch the opcode from PC ($AD) and increment PC
2. fetch the low byte of nnnn from PC and increment PC
3. fetch the high byte of nnnn from PC and increment PC
4. read a byte to A from nnnn

total cycles: 4

$A1: LDA (Indirect,X)
2 bytes

cycle breakdown:
1. fetch the opcode from PC ($A1) and increment PC
2. fetch a byte from PC (nn) and increment PC
3. read from nn, separately add x to nn (make sure that nn+x is mod with 256; NOTE: reading from nn is a throwaway read used for adding x; the read value is not used)
4. read low address byte from computed nn+x; increment that address [modulo 256]
5. read high address byte from what is now nn+x+1
6. read a byte to A from total address

total cycles: 6

$B1: LDA (Indirect),Y
2 bytes

cycle breakdown:
1. fetch the opcode from PC ($B1) and increment PC
2. fetch a byte from PC (nn) and increment PC
3. fetch low byte of effective address (effAddr) from nn
4. fetch high byte of effAddr from (nn+1)%256; add Y to effAddr (+1 cycle if page boundary crossed)
5. read a byte to A from effAddr

total cycles: 5+
```

Some pointers:
- The timing for a read, write or read-write-modify is always fully defined by the addressing mode. The actual operations always take the same amount of time.

Further reading:
- https://www.nesdev.com/6502_cpu.txt
- https://wiki.nesdev.com/w/index.php/CPU_addressing_modes
- http://www.obelisk.me.uk/6502/reference.html
- http://www.6502.org/tutorials/6502opcodes.html